dataset_configs:
  c10:
    dataset: cifar10
    root: ./data/
    new_num_classes: 10

  c100:
    dataset: cifar100
    root: ./data/
    new_num_classes: 100
  
  vww:
    dataset: vww
    root: ./data/
    new_num_classes: 2
  
  flowers:
    dataset: flowers102
    root: ./data/flowers102
    new_num_classes: 102
  
  food:
    dataset: image_folder
    root: ./data/food101
    new_num_classes: 101

  pets:
    dataset: image_folder
    root: ./data/pets
    new_num_classes: 37

  cub:
    dataset: image_folder
    root: ./data/cub200
    new_num_classes: 200


net_configs: # These informations are from `tiny-training/compilation/mcu_ir_gen.py` in `https://github.com/mit-han-lab/tiny-training.git`
# 6 SU schemes for MobileNetV2
  mbv2_scheme_1:
      ratio: 0.0878233231
      SU_scheme:
        n_bias_update: 16  # how many conv to update the bias
        weight_update_ratio: 1-1-0-0.25-0.125-0.125-0.125-0.125  # how many percentage of weights along input channels are updated (also support int number)
        manual_weight_idx: 36-39-40-41-42-45-48-49 # Which layers will be updated weight
    
  mbv2_scheme_2:
    ratio: 0.1508110478
    SU_scheme:
        n_bias_update: 20  # how many conv to update the bias
        weight_update_ratio: 0.125-0.5-0.5-1-0.25-0.125-0.125-1  # how many percentage of weights along input channels are updated (also support int number)
        manual_weight_idx: 32-33-36-39-41-42-45-48 # Which layers will be updated weight

  mbv2_scheme_3:
    ratio: 0.212187637
    SU_scheme:
        n_bias_update: 25  # how many conv to update the bias
        weight_update_ratio: 1-1-1-1-1-0.125-0.5-1  # how many percentage of weights along input channels are updated (also support int number)
        manual_weight_idx: 27-30-33-36-39-42-45-48 # Which layers will be updated weight

  mbv2_scheme_4:
    ratio: 0.2735642262
    SU_scheme:
        n_bias_update: 31  # how many conv to update the bias
        weight_update_ratio: 1-1-1-1-1-0.5-1-1  # how many percentage of weights along input channels are updated (also support int number)
        manual_weight_idx: 27-30-33-36-39-42-45-48 # Which layers will be updated weight

  mbv2_scheme_5:
    ratio: 0.3084995616
    SU_scheme:
        n_bias_update: 34  # how many conv to update the bias
        weight_update_ratio: 1-1-1-1-1-1-1-1  # how many percentage of weights along input channels are updated (also support int number)
        manual_weight_idx: 27-30-33-36-39-42-45-48 # Which layers will be updated weight
    
  mbv2_scheme_6:
      ratio: 0.5
#____________________________________________________________________________________________________________________# 
# 5 SU schemes for mcunet-in1
  mcunet-in1_scheme_1:
    budget: 12096 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 20  # how many conv to update the bias
      weight_update_ratio: 0-0.25-0.5-0.5-0-0  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 23-24-27-30-33-39 # Which layers will be updated weight
  
  mcunet-in1_scheme_2:
    budget: 29440 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 21  # how many conv to update the bias
      weight_update_ratio: 1-0-1-0-0.5-1  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 21-23-24-26-27-30 # Which layers will be updated weight
  
  mcunet-in1_scheme_3:
    budget: 52480 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 22  # how many conv to update the bias
      weight_update_ratio: 1-1-1-1-0.125-0.25  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 21-24-27-30-36-39 # Which layers will be updated weight

  mcunet-in1_scheme_4:
    budget: 75328 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 24  # how many conv to update the bias
      weight_update_ratio: 0.25-1-1-1-0.5-0.5  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 21-24-27-30-33-39 # Which layers will be updated weight

  mcunet-in1_scheme_5:
    budget: 98560 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 23  # how many conv to update the bias
      weight_update_ratio: 1-1-1-1-1-0.5  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 21-24-27-30-36-39 # Which layers will be updated weight
#____________________________________________________________________________________________________________________# 
  proxyless-w0.3_scheme_1: # [Warning !!] There is problem with this scheme: There are 61 conv layer in proxyless-w0.3 => need to update bias in 21 layer - from layer with index is 40 to the one with index is 60. And layer with index 39 (update weight) is not in this range
    budget: 20736 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 21  # how many conv to update the bias
      weight_update_ratio: 0.25-1-0-1-0-0.125-0.25-0.25  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 39-42-44-45-50-51-54-57 # Which layers will be updated weight

  proxyless-w0.3_scheme_2:
    budget: 36288 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 28  # how many conv to update the bias
      weight_update_ratio: 0.5-0.25-1-1-1-0.5-0.25-0.5  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 33-36-39-42-45-51-54-57 # Which layers will be updated weight

  proxyless-w0.3_scheme_3:
    budget: 62976 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 25  # how many conv to update the bias
      weight_update_ratio: 1-0.5-1-1-0.25-0.5-1-1  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 36-39-42-45-48-51-54-57 # Which layers will be updated weight

  proxyless-w0.3_scheme_4:
    budget: 76800 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 32  # how many conv to update the bias
      weight_update_ratio: 1-1-1-1-0.5-1-1-1  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 36-39-42-45-48-51-54-57 # Which layers will be updated weight

  proxyless-w0.3_scheme_5:
    budget: 89088 # use function count_updateable_param() in general_utils to count or can use num_saved_params in sparse_update_tool/manually_initialize_grad_mask()
    SU_scheme:
      n_bias_update: 45  # how many conv to update the bias
      weight_update_ratio: 1-1-1-1-1-1-1-1  # how many percentage of weights along input channels are updated (also support int number)
      manual_weight_idx: 36-39-42-45-48-51-54-57 # Which layers will be updated weight
#____________________________________________________________________________________________________________________# 
  scheme_baseline:
    ratio: 1
#____________________________________________________________________________________________________________________#
# Absolute budget scheme
  scheme_fixed_budget: # Only used for velocity and random
    budget: 192311 #Fill in the number

networks:
  mbv2:
    total_num_params: 2189760

  resnet18:
    total_num_params: 11166912

  resnet50:
    total_num_params: 23454912

  pre_trained_mbv2:
    total_num_params: 2189760

  pre_trained_resnet18:
    total_num_params: 11166912

  pre_trained_resnet50:
    total_num_params: 23454912
  
  # All MCUNets here are Pretrained version, these informations are get from general_utils/count_net_num_conv_params()
  mcunet-in0:
    total_num_params: 543176
  mcunet-in1:
    total_num_params: 463216
  mcunet-in2:
    total_num_params: 552904
  mcunet-in3:
    total_num_params: 561032
  mcunet-in4:
    total_num_params: 1390232

  # Same as above
  proxyless-w0.3:
    total_num_params: 357680